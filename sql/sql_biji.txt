mysql 远程登录  
	mysql -h 192.168.151.18 -u root -p 

创建新用户
	create user username identified by 'password';

	表是一种结构化文件  
DQL :
	数据查询语言（凡是带有select关键字的都是查询语句）
	select ...
 
DML :
	数据操作语言（凡是对表当中的数据进行增删改的都是DML）
	insert 增
	delete 删
	update 改
DDL : 	
	数据定义语言
	凡是带有create、drop、alter的都是DDL
	DDL主要操作的是表的结构，不是表中的数据
	create ： 新建 ，增
	drop ： 删除
	alter ： 修改
	这个增删改和DML不同，这个主要是对表结构进行操作
TCL ： 
	事务控制语言
	包括
		事务提交 ： commit
		事务回滚 ： rollback
DCL ：
	数据控制语言
	例如 ： 授权 grant ， 撤销权限 revoke ....


标准sql语句中要求字符串使用单引号括起来，虽然mysql支持双引号，但是不通用


查看建表语句 
	show create table EMP ;
简单查询 ： 

	去重 ： 
		select distinct JOB from EMP;
			distinct 只能出现在所有字段的最前面 
	查询不同工作岗位的数量
		select count(distinct JOB) from EMP;
	查询不同部门，不同工作岗位的数量
		select count(distinct DEPTNO , JOB) from EMP;
	查看表的创建语句 
		show create table EMP ;  

	导入表 ：
		source 路径 
	不看表中的数据，只看表的结构 ： 
		desc 表名 
	查看mysql 版本
		select  version();
	查看当前操作的数据库
		select database();
	查看字段内容
		select * from dept;
		select dname from dept;
		select dname , deptno from dept;
	使用别名 查看表
		select DNAME as dname , DEPTNO as deptno from DEPT;
		select DNAME  dname , DEPTNO  'dept no' from DEPT;
	查询员工年薪? (字段可以参与数学运算)
		select ENAME , SAL * 12 from EMP;
	找出工资在1100 和 3000 之间的员工，包括1100 和3000
		select ENAME,SAL from EMP where sal <= 3000 and sal >= 1100;
		select ENAME,SAL from EMP where sal between 1100 and 3000;
								between ... and ...   为闭区间  左小右大
	查询字段为空
		select * from EMP where COMM is null;
			空不是一个值，不能用等号衡量，
	找出薪资大于1000 的并且部门编号是20 或者 部门编号30的员工
		select ENAME , JOB , SAL from EMP where (DEPTNO = 20 or DEPTNO = 30) and SAL >= 3000;
				and 的优先级比 or 高
				注意 ： 当运算符的优先级不确定的时候加小括号
	like   % _   
		% 代表多个任意字符
		_ 代表一个任意字符
		转义字符 \
	 
	 排序   默认升序
	 	select ENAME ,SAL from  EMP  order by SAL desc;   降序
		select ENAME ,SAL from  EMP  order by SAL asc;    升序
	按照工资的降序排列，当工资相同的时候再按照名字的升序进行排列
		select * from EMP order by SAL desc , ENAME asc;
			前面字段相同的情况下，后面的字段才会被启用
			越靠前的字段，越能起到主导作用，只有当前面的字段无法完成排序的时候，才会启用后面的字段

		select * from EMP where JOB = 'SALESMAN' order by SAL desc , ENAME desc;
			先执行 from 再执行 where  再执行 select 再执行 order by 



分组函数
	count  计数
	sum    求和
	avg    平均值
	max    最大值
	min    最小值
	记住 ： 所有的分组函数都是对 某一组 数据进行操作的
			**********分组函数自动忽略NULL********
	只要有null参与的运算结果一定是null 

	count(*) 和 count(具体某个字段) , 有什么区别
	 	count(*) 不是统计某个字段中数据的个数，而是统计总记录的个数 ， ***和某个字段无关***
		count(COMM)  表示统计COMM字段中部位NULL的数据总量
	从EMP中找出薪资大于平均薪资的姓名及其薪资并进行降序排列
		select ENAME,SAL from EMP where SAL > (select avg(SAL) from EMP) order by SAL desc;


group by 和 having
	group by : 按照某噶尔字段或者某些字段进行分组
	having  ： having是对分组之后的数据进行再次过滤
	注意 ： 分组函数一般都会和group by 联合使用，这要是为什么他被成为分组函数的原因
			并且任何一个分组函数(count , sum ,avg , max, min ) 都是在group by 语句执行结束后才会执行的
			当一条sql语句没有group by的话， 整张表的数据会自成一组
	******************select 一定会在 group by 后面执行************

select      5
	..
from        1
	..
where       2
	..
group by    3
	.. 
having      4
	..
order by    6
	..
	select ENAME from EMP where SAL > avg(SAL ) ; 
		错误的原因  当sql语句不进行分组时， 在最后会自动添加 group by 
	相当于 ==  select ENAME from EMP where SAL > avg(SAL) group by ;
		没有组 avg 不知道那些成组， 所以 语句会报错
****************************************
当一条语句中有group by 的话， select 后面只能跟分组函数和参与分组的字段 
****************************************	
	多字段联合分组查询
		找出每个部门不同工作岗位的最高薪资
			select 
				DEPTNO , JOB , max(SAL)
			from 
				EMP
			group by 
				DEPTNO , JOB ;
			
	找出各部门薪资的最高工资，并且最高工资大于2900
		select 								select
			max(SAL) , DEPTNO                		max(SAL) , DEPTNO
		from 								from
			EMP 									EMP
		where								group by 
			SAL > 2900								DEPTNO 
		group by           					having  
			DEPTNO ; 								max(SAL) > 2900;
			高效率                              低效率



连接查询
	在实际开发，大多数情况都不是单表查询数据，一般都是多张表联合查询取出最终的结果
		一般一个业务都会对应多张表，比如学生和班级，起码两张表

	根据表的连接方式来划分
		内连接 ： inner
			等值连接
			非等值连接
			自连接		一张表看做两张表
		外链接 ：   outer
			左外连接
			右外连接

		内连接 ： 
			假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的记录查询出来，这就是内连接
			AB两张表没有主副之分，两张表是平等的
		外链接 ： 
			假设A和B表进行连接，使用外连接的话， AB两张表中有一张表是主表，一张表是副表，主要查询主表中的数据，
			捎带着查询副表，当附表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配
		全连接 ：  基本不用
			
			表别名（笛卡尔积）
				查询每个员工的部门名称 ， 要求显示员工名和部门名
					 select                     	select
					 	e.ENAME , d.DNAME 					e.ENAME , d.DNAME
					 from 							from
					 	EMP e , DEPT d 						EMP e
					 where 							join
					 	e.DEPTNO = d.DEPTNO;				DEPT d
						 							on
													 		e.DEPTNO = d.DEPTNO ;
				
				//错误 		select e.ENAME , d.DNAME from EMP e , DEPT d ;

			sql 99 语法结构更加清晰，表的连接条件和后来的where条件分离了

				
				找出每个员工的工资等级，要求显示员工名，工资，工资等级 
					select ENAME , SAL , GRADE from EMP e inner join SALGRADE s on s.LOSAL < e.SAL and s.HISAL > e.SAL ; 
					select ENAME , SAL , GRADE from EMP e join SALGRADE s on e.SAL between s.LOSAL and s.HISAL ;

			自连接  ： 
				显示员工，及其领导的姓名
					select e.ENAME yuangong , d.ENAME shangji from EMP e join EMP d on e.MGR = d.EMPNO;
				*************显示不全 ， 大老板无法显示出上级 *************
				使用外链接 可以解决
					select e.ENAME yuangong , d.ENAME shangji from EMP e left join EMP d on e.MGR = d.EMPNO ;

			外链接最重要的特点 ： 主表的数据无条件的全部查询出来
				查找哪个部门没有员工
						select e.ENAME , d.DEPTNO from EMP e right join DEPT d on e.DEPTNO = d.DEPTNO where e.ENAME is null;

多张表进行连接
		查询每个员工的名字，部门姓名， 及工资等级
			select 
				e.ENAME , d.DNAME , s.GRADE
			from 
				EMP e
			join
				DEPT d
			on
				e.DEPTNO = d.DEPTNO
			join
				SALGRADE s
			on
				e.SAL between s.LOSAL and s.HISAL;
		找出每个员工的部门名称，工资等级，以及上级领导
			和谁进行外连接  ， 看的是 on 中的条件  ， 谁是主表 看的是left 或 right
			select 
				e.ENAME , d.DNAME , s.GRADE p.ENAME '领导' 
			from 
				EMP e
			join
				DEPT d
			on
				e.DEPTNO = d.DEPTNO
			join
				SALGRADE s 
			on 
				e.SAL between s.LOSAL and s.HISAL
			left join
				EMP p
			on
				e.MGR = p.EMPNO;


from 后面嵌套子查询
	找出每个部门平均薪水的薪资等级
		第一步 ： 找出每个部门平均薪水，按照部门编号分组， 求sal
			select 
				DEPTNO ,avg(SAL) as avgsal
			from 
				EMP 
			group by
				DEPTNO ; 
		第二步 ： 将以上的查询结果当做临时表t  ， 让 t 表和salgrade 连接
			select 
				t.* , GRADE
			from                    ------     from 
				t                   ------         ( select DEPTNO , avg(SAL) as avgsal from EMP group by DEPTNO) t 
			join
				SALGRADE s 
			on
				t.avgsal between s.LOSAL and s.HISAL ; 

	找出每个部门薪资等级的平均值
		select 
			t.DEPTNO , avg(GRADE) 
		from 
			(select e.ENAME , e.SAL , e.DEPTNO , s.GRADE from EMP e join SALGRADE s on e.SAL between s.LOSAL and s.HISAL ) t 
		group by 
			t.DEPTNO ;

		select 
			e.DEPTNO , avg(s.GRADE) 
		from 
			EMP e 
		join 
			SALGRADE s 
		on 
			e.SAL between s.LOSAL and s.HISAL 
		group 
			by e.DEPTNO ;


limit 语法机制
	limit startIndex , Length
		startIndex 表示起始位置 ， 从0 开始 ， 0 表示第一条数据
		Length 表示取几个
	
	案例 ： 取出工资前五名的员工
		select ENAME , SAL from EMP order by SAL desc limit 0,5 ;
		select ENAME , SAL from EMP order by SAL desc limit 5 ;

	limit是sql语句执行的最后一个环节


	select         5
		...
	from           1
		...
	where          2
		...
	group by       3
		...
	having         4
		...
	order by       6
		...
	limit          7
		... ;
	












创建表 
	检表语句的语法格式
		create table 表名(
			字段名1 数据类型 ， 
			字段名2 数据类型 ，
			字段名3 数据类型 ，
			字段名4 数据类型 ，
			.......
		);
		mysql的字段数据类型
			int 整数型
			bigint 长整型
			float 浮点型
			char 定长字符串
			varchar 可变长字符串  最长 255
			date 日期类型
			BLOB 二进制大对象 （存储图片，视频 等流媒体信息）
			CLOB 字符大对象 （存储较大文本 ， 比如  ， 可以存储 4G 的字符串）

		drop table if exists t_student ; 
		 create table t_student(
			no bigint ,
			name varchar(255),
			sex char(1)  default 1 ,
			classno varchar(255),
			birth char(10)
			);
		单条插入
			insert into t_student(no,name , sex , classno , birth ) values (1, 'zhangsan' , 'm' , 'gaosan1ban' , '1950-10-11');
		多条插入
			insert into t_student values(2,'lisi' , 'w' , 'gaosan5ban' , '1980-10-22')
			,(3,'wangwu' , 'm' , 'gaosi3ban' , '2000-3-15');
    	
	*******表的复制***********
		create table 表名 as select语句 ； 
			将查询结果当做表创建出来
			create table emp1 as select ENAME ,EMPNO from EMP ;
			create table emp as select * from EMP ;

			insert into emp1 as select *from EMP ;
修改数据  update
 
			update dept set DNAME = 'shanghai ' , LOC = 'renshibu' where DEPTNO  = 10;

删除数据

	delete from 表名 where 条件
		没有条件全部删除
	删除10部门数据
		delete from dept where deptno = 10 ;
		 


约束
	在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的合法性。有效性。完整性

	非空约束（not null） ： 约束的字段不能为null
		只有列级约束 ， 没有表级约束
	唯一约束(unique) : 约束的字段不能重复   ， 但可以为null
		既有列级约束 ， 也有表级约束 
	主键约束 （primary key） ： 约束的字段既不能为null ， 也不能重复

	外键约束 (foreign key) : 
	检查约束(check ) 	 

	create table t_user(
		id int ,
		usercode varchar(255),
		username varchar(255),
		unique (usercode , username)
	);

	create table t_user (
		id int ,
		usercode varchar(255) unique ,
		username varchar(255) unique 
	)


	create table t_user(

     id int primary key  auto_increment,
     username varchar(255) not null,
     useremail varchar(255) unique
    
	);









	引擎 ： 表不同的一种存储方式

		Engine: MyISAM
		Support: YES
		Comment: MyISAM storage engine
		Transactions: NO
		XA: NO
		Savepoints: NO

		MyISAM 这是种 存储引擎不支持事务
		MyISAM 是mysql最常用的存储引擎，但是这种引擎不是默认的
		MYISAM 采用三个文件组织一张表 ：
			xxx.frm :  存储格式的文件
			xxx.MYD :  存储表中数据的文件
			xxx.MYI :  存储表中索引的文件
		优点 ： 可被压缩 ， 节省存储空间 ， 并且可以转换为只读表， 提高检索效率
		缺点 ： 不支持事务

-------------------------------------------------------------------------------------
 
		Engine: InnoDB
		Support: DEFAULT
		Comment: Supports transactions, row-level locking, and foreign keys
		Transactions: YES
		XA: YES
		Savepoints: YES

		优点 ： 支持事务， 外键 ， 行级锁 ， 这种存储引擎最安全

		表的结构存储在xxx.frm文件中
		数据存储在tablespace这样的表空间中（逻辑概念） ， 无法被压缩 ， 无法转换成只读
		这种InnoDB 存储引擎在MySQL数据库崩溃之后提供自动回复机制
		InnoDB 支持级联删除 和 级联更新

--------------------------------------------------------------------------------------
	
		Engine: MEMORY
		Support: YES
		Comment: Hash based, stored in memory, useful for temporary tables
		Transactions: NO
		XA: NO
		Savepoints: NO

		缺点 ： 不支持事务 ， 数据容易丢失 ， 因为所有数据和索引都存储在内存中
		优点 ： 查询速度最快








事务 ： 
	和事务相关的语句只有 ： DML语句 insert delete update事务的存在是为了保证数据的完整性，安全性

	事务的特征 ： 
		ACID
		A ： 原子性 ： 事务是最小的工作单元 ， 不可再分
		C ： 一致性 ： 事务必须保证多条DML语句同时成功或者同时失败
		I ： 隔离性 ： 事务A与事务B之间具有隔离
		D ： 持久性 ： 持久性说的是最终数据必须持久化到硬盘文件中，事务才算成功的结束

	事务之间的隔离性
		事务隔离性存在隔离级别 ， 理论上隔离级别包括4个
			第一级别 ： 读未提交 read uncommitted
				对方事务还没有提交 ， 我们当前事务可以读取到对方未提交的数据
				读未提交存在脏读现象 ： 表示督导了脏的数据
			
			第二级别 ： 读已提交 read commited
				对方事务提交之后的数据 我方可以读取到
				读已提交存在的问题是 ： 不可重复读 
				这种级别解决了脏读现象 

			第三级别 ： 可重复读   repeatable read
				这种级别解决了不可重复读 的问题
				这种级别存在的问题是 ： 读取到的数据是幻象
			 
			第四级别 ： 序列化读 / 串行化读   serializable
				解决了所有问题
				效率低 ， 需要事务排队
			
		oracle数据库默认的隔离级别是 ： 读已提交存在的问题是读已提交
		mysql数据库默认的隔离级别是 ： 可重复读 

	



 start transaction ; 
 rollback ; 
 commit;

savepoint a;
rollback a;


 
使用两个事务演示以上的隔离级别
	第一 ： 演示read uncommitted
		设置事务的隔离级别 ： 
			set global transaction isolation level read uncommitted;
		查看事务的全局隔离级别 ： 
			select @@global.tx_isolation;


1.设置事务的隔离级别
2.给两个mysql终端打开事务  start transaction ;
3.在两个终端上进行不同的操作 insert update delete select 
4.完成终端操作 ， commit  /  rollback ;





索引

	什么时候考虑给字段添加索引 
		数据量庞大 （根据客户的需求 ， 根据线上的环境）
		该字段很少的DML操作 （因为字段进行修改操作 ， 索引也需要维护）
		该字段经常出现在where字句中 
	注意
		逐渐和具有unique约束的字段自动会添加索引
		根据逐渐查询效率较高 ， 尽量根据主键检索

		查看sql语句的执行计划
			explain select ENAME , SAL from EMP where SAL = 5000;
		给薪资SAL字段添加索引
			create index emp_sal_index on EMP(SAL);
			create index 索引名称 on 表名(字段名);
			drop index 索引名称 on 表名 ：

		索引底层采用的数据结构是 ： B + Tree
			通过 B Tree 缩小扫描范围，底层索引进行了排序 ， 分区
			索引会携带数据在表中的“物理地址”；
			最终通过索引检索到数据之后，获取到关联的物理地址 ， 通过物理地址定位表中的数据
			效率是最高的
				select ENAME from EMP where ENAME = 'SMITH';
				通过索引转换为
				select ENAME from EMP where 物理地址 = SMITH当中的物理地址;



		索引的分类 
			单一索引 ： 给单个字段添加索引
			复合索引 ： 给多个字段联合起来添加一个索引
			主键索引 ： 主键上会自动添加索引
			唯一索引 ： 有unique约束的字段上会自动添加索引



视图可以隐藏表的实现细节 保密级别较高的系统，数据库只对外提供相关的视图 ， 可以对视图进行CRUD
对视图操作，但是也会操作原表，只是起到一个隐藏的作用

create table EMP_BAK as select * from EMP;
create view myview1 as select EMPNO e , ENAME  b , SAL s from EMP_BAK;
update myview1 set ENAME = 'hehe' , SAL = 1 where EMPNO = 7369; 
drop view myview1;




数据库导入导出
	导出整个数据库
		mysqldump bjpowernode > 路径 -u root -p 123456;
	导出单张表
		mysqldump 数据库名 表名   >  路径 -uroot -p 123456;
	
	导入数据 
		source 路径 ;


数据库设计三范式
	设计表的依据，按照这个三范式设计的表不会出现数据冗余

	第一范式 ： 主键唯一 ， 原子性不可再分
	第二范式 ： 建立在第一范式的基础上 ， 所有非主键字段完全依赖主键，不能产生部分依赖
	*******************************************************	********
	**************	多对多  ---- 三张表，关系表有两个外键*****************
	***************************************************************
		t_student   学生表
		sno(pk)      sname
		-------------------
		  1           张三
		  2			  李四
		  3			  王五

		t_teacher   教师表
		tno(pk)       tname
		---------------------
		 1             张老师
		 2			   王老师
		 3			   李老师

		 t_student_teacher_relation 学生老师关系表
		 id(pk)      sno(fk)     tno(fk)
		 --------------------------------
		 1				1			3
		 2				1			1
		 3				2			2
		 4				2			3
		 5				3			1
		 6				3			2
		  

	第三范式 ： 建立在第二范式的基础之上 ， 所有非主键字段直接依赖主键 ， 不能产生传递依赖
********************************************************
**********		一对多  ---- 两张表 ， 多的表加外键******************
*******************************************************

	班级t_class
	cno(pk)        cname
	-----------------------
	1				班级1
	2				班级2

	学生表 t_student
	sno(pk)        sname            classno(fk)
	--------------------------------------------
	101             zhang 				1
	102				lisi				1
	103				wangwu				2
	104				aaa					2
	105				bbb					2

	提醒 ： 在实际开发中， 以满足客户的需求为主 ， 有的时候会拿冗余换取执行速度
		三范式的目的为了减少数据冗余 ， 但是 实际开发 ， 以满足客户的需求为主
	
*******************************************
*******	一对一 ****************************
******************************************

主键共享    pk + fk
外键唯一    fk + unique



作业题 
	1. 找出每个部门的最高薪资及人员名称

	select 
		e.ENAME , t.*
	from 
		(select DEPTNO , max(SAL) from EMP group by DEPTNO ) t
	join 
		EMP e
	on
		e.SAL = t.max(SAL) and e.DEPTNO = t.DEPTNO ;

	select 
		e.ENAME , t. *                                                      
	from 
		(select DEPTNO , max(SAL) maxsal from EMP group by DEPTNO) t
	join
		EMP e
	on
		t.DEPTNO = e.DEPTNO and t.maxsal = e.SAL;
